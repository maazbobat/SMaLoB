/**
 * See Afterpay/Clearpay's [Options for Afterpay/Clearpay Button](https://developers.afterpay.com/afterpay-online/reference/adding-afterpay-to-your-site#options-for-the-afterpay-button) documentation.
 */
import type { ShippingContact } from '../../contact';
import type { LineItem, ShippingErrors, ShippingOption, TokenError, TokenResult } from '../payment-method-types';
export declare enum AfterpayButtonColor {
    /** Black background */
    BLACK = "black",
    /** Mint background */
    MINT = "mint"
}
export type AfterpayButtonColorValues = `${AfterpayButtonColor}`;
/**
 * See Afterpay/Clearpay's [Options for Afterpay/Clearpay Button](https://developers.afterpay.com/afterpay-online/reference/adding-afterpay-to-your-site#options-for-the-afterpay-button) documentation.
 */
export declare enum AfterpayButtonType {
    /** Shopping Cart: 'Checkout with afterpay' */
    CheckoutWithAfterpay = "checkout_with_afterpay",
    /** Product Page: 'Buy now with afterpay' */
    BuyNowWithAfterpay = "buy_now_with_afterpay",
    /** Order Placement: 'Place order with afterpay' */
    PlaceOrderWithAfterpay = "place_order_with_afterpay"
}
export type AfterpayButtonTypeValues = `${AfterpayButtonType}`;
/**
 * Text for the final button within the Afterpay/Clearpay CTA.
 * See Afterpay/Clearpay's [Buy Now](https://developers.afterpay.com/afterpay-online/reference/adding-afterpay-to-your-site#buy-now) documentation.
 */
export declare enum AfterpayFinalCtaButtonType {
    REVIEW_MY_ORDER = "review_my_order",
    BUY_NOW = "buy_now"
}
export type AfterpayFinalCtaButtonTypeValues = `${AfterpayFinalCtaButtonType}`;
/**
 * Options for attaching the Afterpay/Clearpay payment method.
 * See Afterpay/Clearpay's [Options for Afterpay Button](https://developers.afterpay.com/afterpay-online/reference/adding-afterpay-to-your-site#options-for-the-afterpay-button) documentation.
 */
export interface AfterpayButtonOptions {
    /** Color of the button that initiates the Afterpay/Clearpay flow */
    buttonColor?: AfterpayButtonColorValues;
    /** The flavor of button to use for your Afterpay/Clearpay flow. This will modify the text */
    buttonType?: AfterpayButtonTypeValues;
    /** The text for the completion button within the Afterpay/Clearpay CTA */
    finalCtaButtonType?: AfterpayFinalCtaButtonTypeValues;
    /** Option to use a custom button, as opposed to the provided Afterpay/Clearpay buttons. if true this will ignore all the above options */
    useCustomButton?: boolean;
}
/**
 * See Afterpay/Clearpay's [Badge Themes](https://developers.afterpay.com/afterpay-online/docs/style-installment-messaging#badge-themes) documentation
 */
export declare enum AfterpayBadgeTheme {
    BLACK_ON_MINT = "black-on-mint",
    BLACK_ON_WHITE = "black-on-white",
    MINT_ON_BLACK = "mint-on-black",
    WHITE_ON_BLACK = "white-on-black"
}
export type AfterpayBadgeThemeValues = `${AfterpayBadgeTheme}`;
export declare enum AfterpaySize {
    XS = "xs",
    SM = "sm",
    MD = "md",
    LG = "lg"
}
export type AfterpaySizeValues = `${AfterpaySize}`;
/**
 * The style of the button used to display the information modal.
 * See Afterpay/Clearpay's [Customize Text](https://developers.afterpay.com/afterpay-online/docs/advanced-configuration#customize-text) documentation.
 */
export declare enum AfterpayModalLinkStyle {
    CIRCLED_INFO_ICON = "circled-info-icon",
    CIRCLED_QUESTION_ICON = "circled-question-icon",
    LEARN_MORE_TEXT = "learn-more-text",
    MORE_INFO_TEXT = "more-info-text",
    NONE = "none"
}
export type AfterpayModalLinkStyleValues = `${AfterpayModalLinkStyle}`;
/**
 * Theme for the information modal.
 * See Afterpay/Clearpay's [Modal Themes](https://developers.afterpay.com/afterpay-online/docs/style-installment-messaging#modal-themes) documentation.
 */
export declare enum AfterpayModalTheme {
    MINT = "mint",
    WHITE = "white"
}
export type AfterpayModalThemeValues = `${AfterpayModalTheme}`;
/**
 * Options for styling the Afterpay/Clearpay Messaging Component.
 * See Afterpay/Clearpay's [Style Messaging](https://developers.afterpay.com/afterpay-online/docs/style-installment-messaging) documentation.
 */
export interface AfterpayMessagingOptions {
    badgeTheme: AfterpayBadgeThemeValues;
    modalLinkStyle: AfterpayModalLinkStyleValues;
    modalTheme: AfterpayModalThemeValues;
    size: AfterpaySizeValues;
}
/**
 * Options for the information modal parts of the Messaging Component.
 * See Afterpay/Clearpay's [Modal Themes](https://developers.afterpay.com/afterpay-online/docs/style-installment-messaging#modal-themes) documentation.
 */
export interface AfterpayDisplayInformationModalOptions {
    modalTheme?: AfterpayModalThemeValues;
}
/**
 * Options for the Checkout Widget to better customize it.
 */
export interface AfterpayCheckoutWidgetOptions {
    includeBranding: boolean;
}
/**
 * Callback which is executed upon a buyer completing the Afterpay/Clearpay flow, or an error occurring during the Afterpay/Clearpay flow.
 */
export type TokenizationCallback = (result?: TokenResult, error?: TokenError) => void;
export declare enum AfterpayEvents {
    /**
     * Occurs when a buyer chooses a shipping address in Afterpay/Clearpay.
     *
     * It is required for you to subscribe to this event if shipping if marked a required.
     * ```js
     * req.addEventListener('afterpay_shippingaddresschanged', function (contact) {
     *   return {
     *     shippingOptions: [
     *       {
     *         id: 'shippingOption1',
     *         label: 'Free Shipping',
     *         amount: '0.00',
     *         total: '27.50', // Line Items + Discounts + Taxes + Shipping
     *         taxLineItems: [
     *           {
     *             id: 'taxItem1',
     *             label: 'Taxes',
     *             amount: '2.50',
     *           }
     *         ]
     *       },
     *       {
     *         id: 'shippingOption2',
     *         label: 'Express Shipping',
     *         amount: '10.00',
     *         total: '38.50', // Line Items + Discounts + Taxes + Shipping
     *         taxLineItems: [
     *           {
     *             id: 'taxItem1',
     *             label: 'Taxes',
     *             amount: '3.50',
     *           }
     *         ]
     *       }
     *     ],
     *   }
     * });
     * ```
     */
    AFTERPAY_SHIPPING_ADDRESS_CHANGED = "afterpay_shippingaddresschanged",
    /**
     * Occurs when a buyer chooses a shipping option in Afterpay/Clearpay.
     *
     * Subscribe to this event if you want to be alerted of shipping options changes.
     * This event if informational only, and does not update the payment request.
     *
     * ```js
     * req.addEventListener('afterpay_shippingoptionchanged', function (option) {
     *   // used for informational purposes only
     * });
     * ```
     */
    AFTERPAY_SHIPPING_OPTION_CHANGED = "afterpay_shippingoptionchanged"
}
export type AfterpayEventsValue = `${AfterpayEvents}`;
export interface AfterpayShippingOption extends ShippingOption {
    taxLineItems?: LineItem[];
    total: LineItem;
}
/**
 * Expected return value from the `afterpay_shippingaddresschanged` event listener
 * on the PaymentRequest instance.
 */
export interface AfterpayPaymentRequestShippingUpdate {
    error?: string;
    shippingErrors?: ShippingErrors;
    shippingOptions?: AfterpayShippingOption[];
}
/**
 * Callback used with `afterpay_shippingaddresschanged`
 * This callback is used to provide a set of shippingOptions to Afterpay/Clearpay, providing
 * the taxes and total amount if the specific shipping option is selected.
 */
export type AfterpayShippingContactCallback = (contact: ShippingContact) => AfterpayPaymentRequestShippingUpdate | Promise<AfterpayPaymentRequestShippingUpdate>;
/**
 * Callback used with `afterpay_shippingoptionchanged`.
 * This callback is used for informational purposes only and does not change the payment request or total amount.
 */
export type AfterpayShippingOptionCallback = (option: ShippingOption) => void;
export type AfterpayPaymentRequestCallback = AfterpayShippingContactCallback | AfterpayShippingOptionCallback;
export type AfterpayPaymentRequestUpdater = (update: AfterpayPaymentRequestShippingUpdate) => void;
